.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_conn_plot_dfc.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_conn_plot_dfc.py:


Estimate dynamic functional connectivity
========================================

This example illustrates how to compute the dynamic functional connectivity
(DFC) using the mutual information (MI). This type of connectivity is computed
for each trial either inside a single window or across multiple windows.


.. code-block:: default

    import numpy as np
    from itertools import product

    from frites.simulations import sim_single_suj_ephy
    from frites.conn import conn_dfc, define_windows, plot_windows

    import matplotlib.pyplot as plt
    # plt.style.use('seaborn-white')








Simulate electrophysiological data
----------------------------------

Let's start by simulating MEG / EEG electrophysiological data coming from
a single subject. The output data of this single subject has a shape of
(n_epochs, n_roi, n_times)


.. code-block:: default


    modality = 'meeg'
    n_roi = 3
    n_epochs = 50
    n_times = 1000
    x, roi, _ = sim_single_suj_ephy(n_epochs=n_epochs, n_times=n_times,
                                    modality=modality, n_roi=n_roi, random_state=0)
    times = np.linspace(-1, 1, n_times)







Simulate spatial correlations
-----------------------------

Bellow, we are simulating some distant correlations by injecting the
activity of an ROI to another


.. code-block:: default


    x[:, [1], slice(100, 400)] += x[:, [0], slice(100, 400)]
    x[:, [2], slice(600, 800)] += x[:, [1], slice(600, 800)]
    print(f'Corr 1 : {roi[0]}-{roi[1]} between [{times[100]}-{times[400]}]')
    print(f'Corr 2 : {roi[2]}-{roi[1]} between [{times[600]}-{times[800]}]')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Corr 1 : L_VCcm-L_VCl between [-0.7997997997997999--0.19919919919919926]
    Corr 2 : L_VCs-L_VCl between [0.20120120120120122-0.6016016016016015]



Define sliding windows
----------------------

Next, we define, and plot sliding windows in order to compute the DFC on
consecutive time windows. In this example we used windows of length 100ms
and 5ms between each consecutive windows


.. code-block:: default


    slwin_len = .1    # 100ms window length
    slwin_step = .02  # 20ms between consecutive windows
    win_sample = define_windows(times, slwin_len=slwin_len,
                                slwin_step=slwin_step)[0]
    times_p = times[win_sample].mean(1)

    # plt.figure(figsize=(10, 8))
    # plot_windows(times, win_sample, title='Sliding windows')
    # plt.ylim(-1, 1)
    # plt.show()







Compute the DFC
---------------

The DFC is going to be computed per trials, bewteen pairs of ROI and inside
each of the temporal window


.. code-block:: default


    # compute DFC
    dfc = conn_dfc(x, win_sample, times=times, roi=roi, n_jobs=1)
    print(dfc)

    plt.figure(figsize=(10, 8))
    # plt.plot(times_p, dfc.mean('trials').T)
    dfc.mean('trials').plot.line(x='times', hue='roi')
    plt.xlabel('Time')
    plt.title("Mean DFC across trials between pairs of roi")
    plt.show()




.. image:: /auto_examples/conn/images/sphx_glr_plot_dfc_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | Estimating DFC : 0/3 [00:00<?,       ?it/s]     33%|###3      | Estimating DFC : 1/3 [00:00<00:00,   27.93it/s]     67%|######6   | Estimating DFC : 2/3 [00:00<00:00,   28.05it/s]    100%|##########| Estimating DFC : 3/3 [00:00<00:00,   28.67it/s]    100%|##########| Estimating DFC : 3/3 [00:00<00:00,   31.62it/s]
    <xarray.DataArray 'DFC (Gaussian Copula Mutual Information Estimator)' (trials: 50, roi: 3, times: 95)>
    array([[[4.74126835e-04, 4.86970457e-05, 1.15753941e-01, ...,
             1.42405137e-01, 9.97611284e-02, 1.01901859e-01],
            [3.29334080e-01, 3.09351981e-01, 7.13511854e-02, ...,
             5.89045638e-04, 1.89484248e-03, 1.92349423e-02],
            [9.04738065e-03, 2.04119571e-02, 2.55241338e-02, ...,
             3.44310608e-03, 1.80414975e-01, 1.03730202e-01]],

           [[2.43588135e-01, 4.48731631e-02, 3.06968745e-02, ...,
             1.32008065e-02, 1.01031357e-04, 1.28225451e-02],
            [1.19740553e-01, 4.07272950e-02, 1.60232615e-02, ...,
             6.33605942e-02, 7.55550936e-02, 2.04663910e-03],
            [1.73070922e-01, 1.90565914e-01, 3.83086987e-02, ...,
             1.21876515e-01, 9.01120529e-02, 3.39306116e-01]],

           [[3.59413236e-01, 6.76742554e-01, 8.00896406e-01, ...,
             3.43222857e-01, 3.39990765e-01, 4.40955430e-01],
            [6.52924832e-03, 1.69114739e-01, 2.32962683e-01, ...,
             3.17537755e-01, 3.83714229e-01, 2.15421885e-01],
            [8.95062694e-04, 4.41071056e-02, 2.38820821e-01, ...,
             5.25394939e-02, 6.38567209e-02, 3.77665579e-01]],
    ...
           [[2.07532123e-02, 3.34448464e-06, 3.19930399e-03, ...,
             2.80422270e-01, 5.90300839e-03, 1.33965313e-01],
            [6.86131716e-01, 4.58753556e-01, 1.49167523e-01, ...,
             4.09633331e-02, 1.40855625e-01, 6.81417212e-02],
            [1.18787738e-03, 4.60020150e-04, 3.37673649e-02, ...,
             1.80716049e-02, 2.04165608e-01, 1.20114468e-01]],

           [[7.02991262e-02, 7.39582926e-02, 3.76868337e-01, ...,
             8.60985741e-03, 4.46620164e-03, 1.48300407e-02],
            [1.44385636e-01, 1.77252650e-01, 2.52936292e-03, ...,
             2.73787137e-02, 1.35907214e-02, 2.21205857e-02],
            [8.77984054e-03, 1.95415434e-03, 1.42009801e-03, ...,
             3.48197877e-01, 3.76554698e-01, 4.14411008e-01]],

           [[6.26457098e-04, 6.44705370e-02, 4.74612694e-03, ...,
             5.92820253e-03, 9.92604182e-04, 6.25926778e-02],
            [6.88552320e-01, 6.04924738e-01, 5.80820143e-02, ...,
             7.11404113e-03, 6.22110516e-02, 2.62972265e-01],
            [4.23928313e-02, 8.31796043e-03, 1.45379873e-02, ...,
             1.15345366e-01, 4.84143989e-03, 2.14368463e-01]]])
    Coordinates:
      * trials   (trials) int64 0 1 2 3 4 5 6 7 8 9 ... 41 42 43 44 45 46 47 48 49
      * roi      (roi) <U12 'L_VCcm-L_VCl' 'L_VCcm-L_VCs' 'L_VCl-L_VCs'
      * times    (times) float64 -0.9499 -0.9299 -0.9099 ... 0.8899 0.9099 0.9299
    Attributes:
        win_sample:  [  0  50  10  60  20  70  30  80  40  90  50 100  60 110  70...
        win_times:   [-0.94994995 -0.92992993 -0.90990991 -0.88988989 -0.86986987...
        agg_ch:      False
        type:        dfc
        estimator:   Gaussian Copula Mutual Information Estimator




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.691 seconds)


.. _sphx_glr_download_auto_examples_conn_plot_dfc.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_dfc.py <plot_dfc.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_dfc.ipynb <plot_dfc.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
