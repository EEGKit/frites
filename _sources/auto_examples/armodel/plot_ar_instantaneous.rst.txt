.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.0486745 ,  0.183683  ,  0.47118904, ..., -0.21696632,
             -0.05857465,  0.44166252],
            [-0.39552592,  0.016894  , -0.04914062, ...,  0.27613087,
              0.6219431 , -0.08237739],
            [ 0.3328631 ,  0.15116063, -0.2070939 , ..., -0.05074311,
             -0.07034514, -0.13766774]],

           [[-0.09763139,  0.52454069,  0.07522849, ..., -0.65077825,
              0.16098359,  0.43284796],
            [ 0.03431688,  0.16194175,  0.35308196, ..., -0.28780182,
             -0.05237379, -0.09157832],
            [-0.22094167, -0.11905156,  0.33316103, ...,  0.04818613,
             -0.29292089, -0.22138715]],

           [[-0.37988544, -0.17111187,  0.20492922, ..., -0.04835319,
              0.62791342,  0.53408075],
            [ 0.19520385,  0.14089951,  0.15635992, ..., -0.05632758,
              0.23304051,  0.44659895],
            [-0.20681784,  0.22586678,  0.35135713, ..., -0.42520318,
             -0.1801855 ,  0.05395535]],
    ...
           [[-0.12272064, -0.08319283,  0.04647592, ..., -0.08102685,
              0.22234671, -0.08970418],
            [ 0.19086088, -0.32487414, -0.31608568, ...,  0.11496859,
              0.24037865,  0.18133121],
            [ 0.46663268, -0.17354156, -0.32069291, ...,  0.29696681,
              0.6579154 , -0.08875411]],

           [[-0.20022865, -0.05230794, -0.21642519, ...,  0.04193454,
              0.03956393, -0.02878327],
            [-0.07409115, -0.20289133, -0.09868652, ..., -0.05793129,
              0.02732922,  0.12571586],
            [ 0.08468125, -0.65769385, -0.03225882, ...,  0.28530471,
              0.06262217,  0.23159105]],

           [[-0.20230303,  0.11196414,  0.30163743, ...,  0.04181389,
             -0.1679025 , -0.39510942],
            [-0.32199909,  0.04323983,  0.47416773, ...,  0.08122701,
             -0.50274075, -0.19971708],
            [-0.11724862,  0.0309661 , -0.18329155, ...,  0.20820326,
             -0.28578064,  0.03507367]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00,  261.03it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  18.142 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
