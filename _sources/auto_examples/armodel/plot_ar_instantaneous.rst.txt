.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.27391814,  0.12370234,  0.74972952, ...,  0.09746039,
             -0.32664486, -0.30134525],
            [ 0.34028524, -0.35430674, -0.00862436, ..., -0.11448739,
              0.31498187,  0.04094264],
            [-0.27354436, -0.28303174,  0.21743611, ..., -0.1355666 ,
              0.07411823, -0.05792461]],

           [[-0.07888004, -0.03749209,  0.0484591 , ...,  0.44732989,
              0.11219034,  0.2283995 ],
            [-0.29855423, -0.17523183,  0.19426778, ..., -0.27863802,
              0.05645029,  0.29595897],
            [ 0.09097779,  0.08324914, -0.24631426, ..., -0.15089461,
             -0.25596425, -0.0849469 ]],

           [[-0.41754316, -0.11646433,  0.22540853, ..., -0.00747544,
             -0.0524803 , -0.21114858],
            [-0.09375487,  0.12071838, -0.36225939, ..., -0.06334727,
              0.09751801,  0.10233924],
            [-0.32877992, -0.53340302, -0.20854216, ...,  0.09269935,
             -0.18085683, -0.25542386]],
    ...
           [[ 0.04522085,  0.14678573, -0.61063012, ..., -0.51490511,
              0.15542048,  0.43552259],
            [ 0.43759975,  0.14015286,  0.094578  , ...,  0.07983727,
              0.09761451, -0.11925254],
            [-0.16809675,  0.23526904, -0.18585974, ...,  0.39263617,
              0.3733138 ,  0.39058521]],

           [[ 0.10688617,  0.24338653,  0.15431949, ..., -0.17240611,
             -0.65578473, -0.24675288],
            [ 0.15051493,  0.09790509, -0.31819143, ..., -0.10003546,
              0.38071455,  0.14495142],
            [-0.15376251,  0.13948584,  0.06817908, ...,  0.11628832,
             -0.01742679,  0.1184585 ]],

           [[-0.14847022, -0.05873308,  0.32710249, ..., -0.00643861,
             -0.0092931 , -0.33338093],
            [-0.30951123, -0.28402645,  0.48989464, ...,  0.49276805,
             -0.0745154 , -0.47945889],
            [ 0.15736588, -0.12193148,  0.12781936, ...,  0.08225   ,
             -0.39906826, -0.32585952]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00,  815.17it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.944 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
