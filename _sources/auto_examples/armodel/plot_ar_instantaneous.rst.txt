.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.11230334,  0.06696632, -0.32186211, ...,  0.62402692,
             -0.05843877, -0.33668794],
            [ 0.01040143, -0.25153634, -0.29701106, ...,  0.18820594,
             -0.22077119, -0.11676234],
            [-0.32020719,  0.01923641, -0.04137971, ...,  0.34530312,
              0.11164437, -0.44307102]],

           [[ 0.22266441, -0.09854821, -0.06786402, ..., -0.70982203,
             -0.15466242,  0.85912644],
            [ 0.11106929, -0.00359775, -0.41196931, ..., -0.3384819 ,
             -0.08666151, -0.04057881],
            [-0.33328834,  0.01966137,  0.33441609, ..., -0.3486162 ,
             -0.20277561,  0.46097432]],

           [[-0.02390588, -0.27616063, -0.08705074, ..., -0.18193466,
             -0.70631768, -0.29717066],
            [ 0.37802796, -0.36601168, -0.40701112, ..., -0.30643558,
              0.37291652,  0.2755506 ],
            [ 0.2262945 ,  0.08798491,  0.26846847, ..., -0.23988267,
             -0.3114401 , -0.21519747]],
    ...
           [[-0.26257384,  0.10980057, -0.13604863, ...,  0.5494473 ,
             -0.03426239, -0.52394916],
            [ 0.13830231,  0.02346313, -0.18983513, ...,  0.17062235,
             -0.22231557,  0.13564344],
            [-0.13920682, -0.16428239,  0.2218605 , ...,  0.07973606,
              0.27215084, -0.02420546]],

           [[ 0.39963003, -0.03400372, -0.82099262, ...,  0.28006349,
             -0.03820768, -0.33723031],
            [-0.22740895,  0.02879832, -0.29090459, ...,  0.1342919 ,
             -0.05934972,  0.03331926],
            [ 0.03955732, -0.20986063, -0.51925448, ..., -0.44847721,
             -0.46201716, -0.46304615]],

           [[ 0.39044883, -0.50264019, -0.69028947, ..., -0.00520477,
             -0.29674837, -0.15514531],
            [ 0.44273188,  0.01217109,  0.0009086 , ..., -0.06548324,
             -0.47673387, -0.15054285],
            [ 0.09863082, -0.0836193 ,  0.02323502, ...,  0.27587849,
              0.43027166, -0.31974151]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00,  138.85it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.695 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
