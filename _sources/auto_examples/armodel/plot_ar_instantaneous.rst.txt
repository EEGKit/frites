.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.15124418,  0.0951803 ,  0.06662861, ...,  0.02829926,
             -0.03122993, -0.38707015],
            [-0.20650032, -0.04394623,  0.14611927, ...,  0.09705594,
             -0.20937655, -0.60204736],
            [ 0.15468752, -0.05572214, -0.00828446, ...,  0.34787289,
              0.1315984 ,  0.07726103]],

           [[ 0.43051914,  0.06624516, -0.20479944, ..., -0.09078511,
              0.66367985,  0.72915511],
            [ 0.21980553, -0.11700476, -0.61766895, ..., -0.09734023,
              0.01821041,  0.33995294],
            [-0.20937386, -0.1275424 ,  0.12498642, ...,  0.16069613,
              0.14751231,  0.04900966]],

           [[ 0.17070858,  0.11139805,  0.19437908, ..., -0.17494861,
              0.20293155,  0.22402134],
            [-0.00844737,  0.29138009,  0.17478824, ..., -0.01099879,
             -0.52129153, -0.05424373],
            [-0.09765529,  0.24462402,  0.33473095, ...,  0.01830691,
             -0.06079158,  0.17932336]],
    ...
           [[ 0.16419276, -0.21917716,  0.05380273, ...,  0.32212416,
              0.02983658, -0.02393045],
            [-0.05313107, -0.05956306, -0.3815841 , ...,  0.16465732,
              0.25984955, -0.11121061],
            [ 0.13454385,  0.21482151,  0.04975803, ...,  0.06424037,
              0.05900483, -0.31402754]],

           [[ 0.02754765, -0.15311123, -0.45272686, ..., -0.21342674,
              0.19477891,  0.35156999],
            [-0.16198817,  0.1164885 ,  0.21602875, ...,  0.00844476,
             -0.26673178, -0.09929487],
            [-0.5171224 ,  0.29480183,  0.27099687, ..., -0.2354315 ,
              0.02125343,  0.12021301]],

           [[-0.05129932, -0.05619488,  0.09496458, ..., -0.05917334,
             -0.21679979, -0.14020185],
            [ 0.29165272,  0.02003001,  0.05943042, ..., -0.32043848,
             -0.57592696, -0.25269758],
            [-0.09040847,  0.26839239,  0.1032259 , ..., -0.32413047,
              0.31900134,  0.11038311]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 2720.04it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.906 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
