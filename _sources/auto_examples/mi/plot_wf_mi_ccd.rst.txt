.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_mi_plot_wf_mi_ccd.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_mi_plot_wf_mi_ccd.py:


MI between two continuous variables conditioned by a discret one
================================================================

This example illustrates how to compute the mutual information between two
continuous variables, conditioned by a discret one. The first variable is an
electrophysiological data (M/EEG, intracranial). The second continuous is
usually a regressor and the third is a discret variable composed with integers
generally describing conditions. This type of mutual information is equivalent
to partial correlation. For further details, see Ince et al., 2017
:cite:`ince2017statistical`


.. code-block:: default

    from frites.simulations import sim_multi_suj_ephy, sim_mi_ccd
    from frites.dataset import DatasetEphy
    from frites.workflow import WfMi

    import matplotlib.pyplot as plt
    plt.style.use('seaborn-white')








Simulate electrophysiological data
----------------------------------

Let's start by simulating MEG / EEG electrophysiological data coming from
multiple subjects using the function
:func:`frites.simulations.sim_multi_suj_ephy`. As a result, the `x` output
is a list of length `n_subjects` of arrays, each one with a shape of
n_epochs, n_sites, n_times


.. code-block:: default


    modality = 'meeg'
    n_subjects = 5
    n_epochs = 400
    n_times = 100
    x, roi, time = sim_multi_suj_ephy(n_subjects=n_subjects, n_epochs=n_epochs,
                                      n_times=n_times, modality=modality,
                                      random_state=0)







Extract the continuous and the discret variable
-----------------------------------------------

Here we extract the continuous and the discret variables from the random
dataset generated above


.. code-block:: default


    y, z, _ = sim_mi_ccd(x, snr=1.)







Define the electrophysiological dataset
---------------------------------------

Now we define an instance of :class:`frites.dataset.DatasetEphy`


.. code-block:: default


    dt = DatasetEphy(x, y=y, roi=roi, z=z, times=time)








Compute the mutual information
------------------------------

Once we have the dataset instance, we can then define an instance of workflow
:class:`frites.workflow.WfMi`. This instance is used to compute the mutual
information


.. code-block:: default


    # mutual information type ('ccd' = continuous; continuous | discret)
    mi_type = 'ccd'

    # define the workflow
    wf = WfMi(mi_type=mi_type)
    # compute the mutual information
    mi, _ = wf.fit(dt, mcp=None, n_jobs=1)

    # plot the information shared between the data and the regressor y
    plt.plot(time, mi)
    plt.xlabel("Time (s)"), plt.ylabel("MI (bits)")
    plt.title('I(C; C | D)')
    plt.show()



.. image:: /auto_examples/mi/images/sphx_glr_plot_wf_mi_ccd_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | Estimating MI : 0/1 [00:00<?,       ?it/s]    100%|##########| Estimating MI : 1/1 [00:00<00:00,    8.30it/s]    100%|##########| Estimating MI : 1/1 [00:00<00:00,    8.27it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.831 seconds)


.. _sphx_glr_download_auto_examples_mi_plot_wf_mi_ccd.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_wf_mi_ccd.py <plot_wf_mi_ccd.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_wf_mi_ccd.ipynb <plot_wf_mi_ccd.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
