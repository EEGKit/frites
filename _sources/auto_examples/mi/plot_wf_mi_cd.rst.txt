
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/mi/plot_wf_mi_cd.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_mi_plot_wf_mi_cd.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_mi_plot_wf_mi_cd.py:


MI between a continuous and a discret variables
===============================================

This example illustrates how to compute the mutual information between a
continuous and a discret variables. The first variable is an
electrophysiological data (M/EEG, intracranial). The discret variable, composed
with integers, can for example describe conditions. This type of mutual
information is equivalent to was is performed in machine-learning. For further
details, see Ince et al., 2017 :cite:`ince2017statistical`

.. GENERATED FROM PYTHON SOURCE LINES 12-20

.. code-block:: default

    from frites.simulations import sim_multi_suj_ephy, sim_mi_cd
    from frites.dataset import DatasetEphy
    from frites.workflow import WfMi

    import matplotlib.pyplot as plt
    plt.style.use('seaborn-white')









.. GENERATED FROM PYTHON SOURCE LINES 21-29

Simulate electrophysiological data
----------------------------------

Let's start by simulating MEG / EEG electrophysiological data coming from
multiple subjects using the function
:func:`frites.simulations.sim_multi_suj_ephy`. As a result, the `x` output
is a list of length `n_subjects` of arrays, each one with a shape of
n_epochs, n_sites, n_times

.. GENERATED FROM PYTHON SOURCE LINES 29-38

.. code-block:: default


    modality = 'meeg'
    n_subjects = 5
    n_epochs = 400
    n_times = 100
    x, roi, time = sim_multi_suj_ephy(n_subjects=n_subjects, n_epochs=n_epochs,
                                      n_times=n_times, modality=modality,
                                      random_state=0)








.. GENERATED FROM PYTHON SOURCE LINES 39-48

Extract the discret variable
------------------------------

As explains in the top description, the discret variable is used to describes
for example conditions. Thus, by computing the mutual information between the
electrophysiological data and your discret variable, you are looking for
recording sites and time-points of data that correlates with conditions. This
kind of analysis is similar to what is done in machine-learning. First,
extract the conditions from the random dataset generated above.

.. GENERATED FROM PYTHON SOURCE LINES 48-53

.. code-block:: default


    x, y, _ = sim_mi_cd(x, snr=1., n_conditions=3)
    # print the conditions for the single subject
    print(y[0])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1
     1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
     1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
     1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
     1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
     2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
     2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
     2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]




.. GENERATED FROM PYTHON SOURCE LINES 54-58

Define the electrophysiological dataset
---------------------------------------

Now we define an instance of :class:`frites.dataset.DatasetEphy`

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default


    dt = DatasetEphy(x, y=y, roi=roi, times=time)








.. GENERATED FROM PYTHON SOURCE LINES 62-68

Compute the mutual information
------------------------------

Once we have the dataset instance, we can then define an instance of workflow
:class:`frites.workflow.WfMi`. This instance is used to compute the mutual
information

.. GENERATED FROM PYTHON SOURCE LINES 68-82

.. code-block:: default


    # mutual information type ('cd' = continuous / discret)
    mi_type = 'cd'

    # define the workflow
    wf = WfMi(mi_type=mi_type, verbose=False)
    # compute the mutual information
    mi, _ = wf.fit(dt, mcp=None, n_jobs=1)

    # plot the information shared between the data and the regressor y
    plt.plot(time, mi)
    plt.xlabel("Time (s)"), plt.ylabel("MI (bits)")
    plt.title('I(C; D)')
    plt.show()



.. image:: /auto_examples/mi/images/sphx_glr_plot_wf_mi_cd_001.png
    :alt: I(C; D)
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.947 seconds)

**Estimated memory usage:**  8 MB


.. _sphx_glr_download_auto_examples_mi_plot_wf_mi_cd.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_wf_mi_cd.py <plot_wf_mi_cd.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_wf_mi_cd.ipynb <plot_wf_mi_cd.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
