
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/xarray/plot_xr_export.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.

.. GENERATED FROM PYTHON SOURCE LINES 8-12

.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd








.. GENERATED FROM PYTHON SOURCE LINES 13-17

Simulate data
-------------

lets start by creating two random spatio-temporal arrays

.. GENERATED FROM PYTHON SOURCE LINES 17-38

.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')








.. GENERATED FROM PYTHON SOURCE LINES 39-43

Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it

.. GENERATED FROM PYTHON SOURCE LINES 43-54

.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.88838666, 0.53474012, 0.1878915 , 0.98169562, 0.8263476 ,
            0.11035822, 0.70236223],
           [0.78978174, 0.66383351, 0.44565079, 0.68666003, 0.42939715,
            0.43224214, 0.23643613],
           [0.84394581, 0.55009304, 0.86762796, 0.80484181, 0.83617185,
            0.04736803, 0.29748691],
           [0.13594907, 0.48286295, 0.48222677, 0.38755735, 0.99953289,
            0.46413114, 0.22797417],
           [0.33628174, 0.68557105, 0.81341743, 0.30762464, 0.10499828,
            0.91698696, 0.03169828],
           [0.3227503 , 0.5867635 , 0.41986141, 0.29381507, 0.42416758,
            0.38143481, 0.89919348],
           [0.3625885 , 0.74360124, 0.7231114 , 0.97335173, 0.87045199,
            0.79839487, 0.86592563],
           [0.38939669, 0.09490838, 0.40389025, 0.51367892, 0.04303291,
            0.5710021 , 0.15470212],
           [0.75991551, 0.38151722, 0.9239931 , 0.41766633, 0.58625922,
            0.74054279, 0.18620742],
           [0.68176524, 0.75193764, 0.33184208, 0.37545725, 0.5589578 ,
            0.23739941, 0.62565786],
    ...
           [0.31697206, 0.69497059, 0.09387745, 0.89898154, 0.13986079,
            0.64418995, 0.99655202],
           [0.87920915, 0.93325545, 0.35952546, 0.26739635, 0.84392361,
            0.89707492, 0.85260478],
           [0.55627569, 0.12173541, 0.54598071, 0.10673993, 0.16765511,
            0.91549613, 0.37777302],
           [0.5884362 , 0.34848544, 0.67976682, 0.49279138, 0.56809997,
            0.70982746, 0.70833883],
           [0.93688389, 0.68914335, 0.79102244, 0.09030674, 0.92843709,
            0.11320821, 0.53036028],
           [0.23097484, 0.27125008, 0.33488673, 0.13941962, 0.5738932 ,
            0.35566177, 0.54588592],
           [0.60100194, 0.43153931, 0.30278729, 0.23601869, 0.53148878,
            0.44500919, 0.19140436],
           [0.49744641, 0.39018497, 0.02310322, 0.02364652, 0.93690711,
            0.76096407, 0.65398712],
           [0.81837715, 0.99232374, 0.09276197, 0.33141815, 0.37452611,
            0.19068292, 0.32345412],
           [0.93062208, 0.67735287, 0.27037219, 0.15807867, 0.88554264,
            0.74849099, 0.11483701]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0




.. GENERATED FROM PYTHON SOURCE LINES 55-60

Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays

.. GENERATED FROM PYTHON SOURCE LINES 60-81

.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (times: 30, roi: 7)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.8884 0.5347 0.1879 ... 0.8855 0.7485 0.1148
        second   (times, roi) float64 0.3851 0.7009 0.1071 ... 0.06329 0.8838 0.8899
    Attributes:
        desc:     This is my dataset
        sf:       256.0





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.811 seconds)

**Estimated memory usage:**  8 MB


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
