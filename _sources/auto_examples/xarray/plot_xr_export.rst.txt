.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[4.09505729e-01, 3.24193669e-01, 1.47491502e-01, 3.77212914e-01,
            9.92313688e-01, 4.64309917e-02, 5.76022197e-01],
           [8.41446662e-01, 5.03344128e-02, 7.83488516e-01, 1.19528556e-01,
            7.46631995e-01, 9.47548124e-01, 8.57767227e-01],
           [6.06372166e-01, 7.75816684e-01, 6.38717427e-02, 5.46504480e-01,
            1.17935265e-01, 7.39601723e-01, 5.52942303e-01],
           [1.88873392e-01, 2.43208642e-02, 3.62668810e-01, 2.30982593e-01,
            2.91391908e-01, 3.83167044e-01, 3.29855833e-01],
           [3.33055565e-01, 8.93957803e-01, 8.28391276e-02, 8.65794716e-01,
            4.58603807e-01, 8.91519103e-02, 6.93869279e-01],
           [2.53574478e-01, 8.42819993e-01, 3.74382450e-01, 6.34369078e-01,
            2.58080137e-01, 4.18090222e-01, 9.33963534e-01],
           [7.92288577e-02, 9.03829544e-01, 9.10258476e-01, 6.29317906e-01,
            5.37038890e-01, 4.73658583e-01, 1.56797423e-01],
           [7.75540654e-01, 6.94428171e-01, 1.34633940e-01, 5.53748990e-01,
            4.65069772e-01, 3.06624539e-01, 7.25738021e-01],
           [4.11493741e-01, 8.32518492e-02, 8.94305294e-01, 7.53698498e-01,
            8.07561930e-01, 9.46998163e-01, 8.28014161e-01],
           [9.08605574e-01, 3.29732221e-01, 4.99543923e-01, 2.52691070e-01,
            3.19798871e-02, 7.95682029e-01, 9.17020500e-01],
    ...
           [3.85215311e-01, 5.24961115e-01, 5.78309634e-01, 9.07902120e-01,
            2.97881308e-01, 5.52750339e-01, 6.94370801e-01],
           [1.65129291e-02, 1.39344207e-01, 5.66327003e-01, 5.82085970e-01,
            5.30482921e-01, 5.82508976e-01, 8.57969874e-01],
           [9.97203037e-01, 1.43315587e-01, 4.79000667e-01, 3.93218048e-01,
            4.14830844e-01, 2.84687227e-01, 4.00614402e-01],
           [8.68523524e-01, 6.10686508e-01, 6.89769564e-01, 5.65353820e-01,
            2.85883525e-01, 3.90140871e-02, 8.82575326e-01],
           [7.86753939e-01, 9.59881057e-01, 7.26220140e-01, 4.75113645e-01,
            8.19427468e-01, 2.90250988e-01, 5.07171522e-01],
           [3.49437920e-01, 7.63455003e-01, 6.88566819e-01, 7.09938673e-01,
            1.39653180e-01, 2.04149676e-01, 7.63353457e-01],
           [1.71716090e-01, 2.92551784e-01, 3.88416873e-01, 1.05755782e-01,
            9.64412559e-01, 8.08334992e-01, 8.64400213e-01],
           [3.18746723e-01, 9.28367378e-01, 4.72719726e-01, 8.97381976e-02,
            9.34919558e-01, 6.70004385e-01, 6.39212916e-01],
           [7.58599040e-01, 7.43664647e-01, 9.41058530e-01, 4.00867660e-02,
            4.68139177e-01, 7.77801402e-01, 6.83858667e-01],
           [3.83792605e-01, 7.46518620e-01, 8.27770911e-01, 6.99767212e-01,
            9.42672476e-01, 3.05825955e-01, 3.77792126e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (times: 30, roi: 7)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.4095 0.3242 0.1475 ... 0.9427 0.3058 0.3778
        second   (times, roi) float64 0.937 0.8984 0.6639 ... 0.1324 0.9621 0.6542
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.178 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
