.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.2032012 , 0.98034683, 0.43863052, 0.80473428, 0.63248827,
            0.72819015, 0.70704866],
           [0.64615249, 0.38647962, 0.07441134, 0.48874836, 0.79285422,
            0.13722301, 0.90521533],
           [0.45756047, 0.93011804, 0.6974468 , 0.95246162, 0.72153266,
            0.00580776, 0.40916478],
           [0.49407238, 0.28777558, 0.33897083, 0.18385792, 0.71890899,
            0.85481259, 0.73724402],
           [0.19999192, 0.10085529, 0.30429538, 0.98318822, 0.78325691,
            0.18979161, 0.8078531 ],
           [0.0829835 , 0.24075302, 0.66250968, 0.79541089, 0.88701286,
            0.97972964, 0.32865483],
           [0.85552103, 0.75304779, 0.2730836 , 0.70561907, 0.60122402,
            0.24206088, 0.66726238],
           [0.47434615, 0.75645844, 0.94545378, 0.49593114, 0.95575967,
            0.70000061, 0.48246982],
           [0.08519121, 0.62835808, 0.68339176, 0.13734578, 0.1926303 ,
            0.6847187 , 0.05908851],
           [0.41067433, 0.35787922, 0.03511434, 0.22094199, 0.50349819,
            0.65760633, 0.93182343],
    ...
           [0.77732612, 0.50664761, 0.3920737 , 0.11429889, 0.1750111 ,
            0.87671448, 0.59251442],
           [0.98262327, 0.54958521, 0.11148916, 0.33499431, 0.26652168,
            0.77946361, 0.59491689],
           [0.87500506, 0.06068692, 0.29871142, 0.23796801, 0.46209594,
            0.64359695, 0.1501723 ],
           [0.2213467 , 0.30483774, 0.07428167, 0.83033908, 0.22616593,
            0.31984929, 0.41830358],
           [0.72562542, 0.84187609, 0.04473143, 0.26471314, 0.29293113,
            0.14542279, 0.69541956],
           [0.04909343, 0.05505327, 0.63653245, 0.80493088, 0.39155121,
            0.12888152, 0.98801506],
           [0.96292524, 0.19824472, 0.32890599, 0.82041155, 0.00708084,
            0.78302727, 0.68126417],
           [0.136266  , 0.93260603, 0.10570195, 0.80005526, 0.26770602,
            0.30574464, 0.39422286],
           [0.73001946, 0.52537846, 0.80217083, 0.39399765, 0.2979108 ,
            0.0481505 , 0.67305554],
           [0.97745615, 0.05984922, 0.58275867, 0.94211518, 0.97613587,
            0.20365764, 0.79836548]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.2032 0.9803 0.4386 ... 0.9761 0.2037 0.7984
        second   (times, roi) float64 0.3985 0.3745 0.8786 ... 0.5043 0.2232 0.5485
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.138 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
